#!/usr/bin/env python3
#
# This file is part of the Robotic Observatory Control Kit (rockit)
#
# rockit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# rockit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rockit.  If not, see <http://www.gnu.org/licenses/>.

"""Ash dome daemon"""

import argparse
import re
import threading
import time
import Pyro4
import serial
from astropy.time import Time
import astropy.units as u
from rockit.common import log, TryLock
from rockit.common.helpers import pyro_client_matches
from rockit.dome.pulsar import Config, CommandStatus, AzimuthStatus, ShutterStatus, HeartbeatStatus

SHUTTER_REGEX = r'(?P<status>\d),(?P<heartbeat>\d{3})\r\n'


class DomeDaemon:
    """Daemon class that wraps the USB-serial interface"""
    def __init__(self, config):
        self._config = config
        self._azimuth_port = None
        self._azimuth_port_error = False
        self._azimuth_port_lock = threading.Lock()
        self._azimuth_status_condition = threading.Condition()
        self._azimuth_status_lock = threading.Lock()
        self._azimuth_status_time = Time.now()
        self._azimuth_status = AzimuthStatus.Disconnected
        self._azimuth = 0
        self._azimuth_command_lock = threading.Lock()
        self._azimuth_move_complete_condition = threading.Condition()

        self._shutter_port = None
        self._shutter_port_error = False
        self._shutter_status_lock = threading.Lock()
        self._shutter_status_time = Time.now()
        self._shutter_status = ShutterStatus.Disconnected
        self._shutter_command_lock = threading.Lock()
        self._shutter_move_complete_condition = threading.Condition()

        self._heartbeat_status = HeartbeatStatus.Disabled
        self._heartbeat_seconds_remaining = 0

        self._force_stopped = False
        self._engineering_mode = False

        threading.Thread(target=self.__azimuth_thread, daemon=True).start()
        threading.Thread(target=self.__shutter_thread, daemon=True).start()

    def __azimuth_thread(self):
        """Monitors the status of the azimuth controller"""
        while True:
            # Initial setup
            try:
                self._azimuth_port = serial.Serial(self._config.azimuth_serial_port,
                                           self._config.azimuth_serial_baud,
                                           rtscts=True,
                                           timeout=self._config.azimuth_serial_timeout)
                prefix = 'Restored' if self._azimuth_port_error else 'Established'
                log.info(self._config.log_name, prefix + ' serial connection to azimuth drive')
                self._azimuth_port_error = False

            except Exception as exception:
                if not self._azimuth_port_error:
                    log.error(self._config.log_name, 'Lost serial connection to azimuth drive')
                    print('Failed to connect to azimuth drive (' + str(exception) + ')')
                self._azimuth_port_error = True
                time.sleep(5.)
                continue

            try:
                with self._azimuth_status_lock:
                    self._azimuth_status_time = Time.now()
                    self._azimuth_status = AzimuthStatus.NotHomed

                with self._azimuth_port_lock:
                    self._azimuth_port.write(f'HOME {self._config.home_azimuth:05.1f}\r'.encode('ascii'))
                    self._azimuth_port.read_until(serial.CR)

                # Main run loop
                while True:
                    azimuth_status = AzimuthStatus.Idle
                    with self._azimuth_port_lock:
                        self._azimuth_port.write(b'V\r')

                        # Controller sometimes stalls in the middle of responding
                        # Make sure we assemble the full response before continuing
                        response = b''
                        for i in range(13):
                            char = serial.CR if i == 12 else b'\t'
                            response += self._azimuth_port.read_until(char)

                    fields = response.decode('ascii').split('\t')
                    delay = self._config.azimuth_loop_delay
                    azimuth = float(fields[0])
                    target_azimuth = float(fields[3])
                    mstate = int(fields[1])

                    # Motor often stalls within 1 deg of the target, so allow some slop
                    if mstate not in [0, 3] and (mstate == 9 or abs(target_azimuth - azimuth) > 1):
                        # Azimuth is moving
                        delay = self._config.azimuth_moving_loop_delay
                        if self._azimuth_status == AzimuthStatus.Homing:
                            azimuth_status = AzimuthStatus.Homing
                        else:
                            azimuth_status = AzimuthStatus.Moving
                    else:
                        # Azimuth is stationary
                        if self._azimuth_status == AzimuthStatus.NotHomed:
                            azimuth_status = AzimuthStatus.NotHomed

                    with self._azimuth_status_lock:
                        self._azimuth_status_time = Time.now()
                        self._azimuth = azimuth
                        self._azimuth_status = azimuth_status

                    with self._azimuth_status_condition:
                        self._azimuth_status_condition.wait(delay)

            except Exception as exception:
                with self._azimuth_status_lock:
                    self._azimuth_status_time = Time.now()
                    self._azimuth_status = AzimuthStatus.Disconnected

                with self._azimuth_port_lock:
                    self._azimuth_port.close()

                if not self._azimuth_port_error:
                    log.error(self._config.log_name, 'Lost serial connection to azimuth drive')
                    print('Lost connection to azimuth drive (' + str(exception) + ')')

                self._azimuth_port_error = True
                time.sleep(5.)

    def __shutter_thread(self):
        """Monitors the status of the roof by reading serial port"""
        shutter_regex = re.compile(SHUTTER_REGEX)
        while True:
            # Initial setup
            try:
                self._shutter_port = serial.Serial(self._config.shutter_serial_port,
                                           self._config.shutter_serial_baud,
                                           timeout=self._config.shutter_serial_timeout)
                prefix = 'Restored' if self._shutter_port_error else 'Established'
                log.info(self._config.log_name, prefix + ' serial connection to shutter drive')
                self._shutter_port_error = False

            except Exception as exception:
                if not self._shutter_port_error:
                    log.error(self._config.log_name, 'Lost serial connection to shutter drive')
                    print('Failed to connect to shutter drive (' + str(exception) + ')')
                self._shutter_port_error = True
                time.sleep(5.)
                continue

            try:
                # Discard any stale state
                self._shutter_port.reset_input_buffer()
                self._shutter_port.reset_output_buffer()

                # Main run loop
                while True:
                    data = self._shutter_port.readline().decode('ascii')
                    match = shutter_regex.match(data)
                    if match:
                        with self._shutter_status_lock:
                            self._shutter_status_time = Time.now()
                            self._shutter_status = int(match.group('status'))

                            heartbeat = int(match.group('heartbeat'))
                            if heartbeat == 0xFF:
                                self._heartbeat_status = HeartbeatStatus.TimedOut
                                self._heartbeat_seconds_remaining = 0
                            elif heartbeat == 0:
                                self._heartbeat_status = HeartbeatStatus.Disabled
                                self._heartbeat_seconds_remaining = 0
                            else:
                                self._heartbeat_status = HeartbeatStatus.Active
                                self._heartbeat_seconds_remaining = heartbeat

            except Exception as exception:
                self._shutter_port.close()
                if not self._shutter_port_error:
                    log.error(self._config.log_name, 'Lost serial connection to shutter drive')
                    print('Lost connection to shutter drive (' + str(exception) + ')')

                self._shutter_port_error = True
                time.sleep(5.)

    def __shutter_move(self, open_position):
        """Issues a shutter command and blocks until the final state is reached (or timeout)"""
        if open_position and self._shutter_status == ShutterStatus.Open:
            return True

        if not open_position and self._shutter_status == ShutterStatus.Closed:
            return True

        if self._force_stopped:
            return False

        start_time = Time.now()
        try:
            if open_position:
                if self._shutter_port.write(b'\xf1') != 1:
                    raise serial.SerialException('Failed to send open command')
            else:
                if self._shutter_port.write(b'\xf2') != 1:
                    raise serial.SerialException('Failed to send close command')
        except Exception as exception:
            log.error(self._config.log_name, 'Failed to send serial command (' + str(exception) + ')')

        heartbeat_tripped = False
        while True:
            time.sleep(2)
            runtime = (Time.now() - start_time).to_value(u.s)
            if open_position:
                at_limit = self._shutter_status == ShutterStatus.Open
            else:
                at_limit = self._shutter_status == ShutterStatus.Closed

            if self._force_stopped:
                try:
                    if self._shutter_port.write(b'\xff') != 1:
                        raise serial.SerialException('Failed to send stop command')
                except Exception as exception:
                    log.error(self._config.log_name, 'Failed to send serial command (' + str(exception) + ')')
                break

            heartbeat_tripped = self._heartbeat_status == HeartbeatStatus.TimedOut
            if heartbeat_tripped or at_limit or 0 < self._config.shutter_move_timeout < runtime:
                break

        return not self._force_stopped and not heartbeat_tripped and at_limit

    @Pyro4.expose
    def open_shutter(self):
        """
        Open the shutter.
        :return: CommandStatus indicating success or error code
        """
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        if self._shutter_status == ShutterStatus.Disconnected:
            return CommandStatus.NotConnected

        if self._engineering_mode:
            return CommandStatus.EngineeringModeActive

        if self._heartbeat_status == HeartbeatStatus.TimedOut:
            return CommandStatus.HeartbeatTimedOut

        with TryLock(self._shutter_command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            if not self.__shutter_move(True):
                log.error(self._config.log_name, 'Failed to open shutter')
                return CommandStatus.Failed

            log.info(self._config.log_name, 'Open complete')
            return CommandStatus.Succeeded

    @Pyro4.expose
    def close_shutter(self):
        """
        Close the shutter.
        :return: CommandStatus indicating success or error code
        """
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        if self._shutter_status == ShutterStatus.Disconnected:
            return CommandStatus.NotConnected

        if self._engineering_mode:
            return CommandStatus.EngineeringModeActive

        if self._heartbeat_status == HeartbeatStatus.TimedOut:
            return CommandStatus.HeartbeatTimedOut

        with TryLock(self._shutter_command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            if not self.__shutter_move(False):
                log.error(self._config.log_name, 'Failed to close shutter')
                return CommandStatus.Failed

            log.info(self._config.log_name, 'Close complete')
            return CommandStatus.Succeeded

    @Pyro4.expose
    def stop(self):
        """Stops any active shutter movement"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with self._shutter_status_lock:
            if self._heartbeat_status == HeartbeatStatus.TimedOut and self._shutter_status == ShutterStatus.Closing:
                return CommandStatus.HeartbeatCloseInProgress

        log.warning(self._config.log_name, 'Received stop command')

        # The stop command overrides all other commands
        self._force_stopped = True
        with self._shutter_command_lock:
            with self._azimuth_command_lock:
                self._force_stopped = False

        return CommandStatus.Succeeded

    @Pyro4.expose
    def set_engineering_mode(self, enabled):
        """Enable engineering mode (all movement commands disabled)"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with TryLock(self._shutter_command_lock) as success_shutter:
            with TryLock(self._shutter_command_lock) as success_azimuth:
                if not success_shutter or not success_azimuth:
                    return CommandStatus.Blocked

                with self._shutter_status_lock:
                    if self._heartbeat_status != HeartbeatStatus.Disabled:
                        return CommandStatus.EngineeringModeRequiresHeartbeatDisabled

                    if self._shutter_status == ShutterStatus.Closing and self._heartbeat_status == HeartbeatStatus.TimedOut:
                        return CommandStatus.HeartbeatCloseInProgress

                self._engineering_mode = enabled
                return CommandStatus.Succeeded

    @Pyro4.expose
    def set_heartbeat_timer(self, timeout):
        """Enable or disable the auto-close countdown"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        if self._engineering_mode:
            return CommandStatus.EngineeringModeActive

        with self._shutter_status_lock:
            if self._heartbeat_status == HeartbeatStatus.TimedOut and self._shutter_status == ShutterStatus.Closing:
                return CommandStatus.HeartbeatCloseInProgress

            if timeout != 0 and self._heartbeat_status == HeartbeatStatus.TimedOut:
                return CommandStatus.HeartbeatTimedOut

        if timeout < 0 or timeout > 240:
            return CommandStatus.HeartbeatInvalidTimeout

        if self._shutter_port.write(bytes([timeout])) != 1:
            return CommandStatus.Failed

        return CommandStatus.Succeeded


    def __wait_for_azimuth(self):
        """Wait for the dome to stop rotating (or timeout)"""
        if self._force_stopped:
            return False

        with self._azimuth_status_condition:
            self._azimuth_status_condition.notify_all()

        start_time = Time.now()
        while True:
            time.sleep(self._config.azimuth_moving_loop_delay)
            runtime = (Time.now() - start_time).to_value(u.s)

            with self._azimuth_status_lock:
                if self._azimuth_status == AzimuthStatus.Idle or runtime > self._config.azimuth_move_timeout:
                    break

            if self._force_stopped:
                try:
                    with self._azimuth_port_lock:
                        self._azimuth_port.write(b'STOP\r')
                        self._azimuth_port.read_until(serial.CR)
                except Exception as exception:
                    log.error(self._config.log_name, 'Failed to send serial command (' + str(exception) + ')')
                break

        with self._azimuth_status_lock:
            return not self._force_stopped and self._azimuth_status == AzimuthStatus.Idle

    @Pyro4.expose
    def home_azimuth(self, blocking=True):
        """Home the azimuth motor"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        if self._azimuth_status == AzimuthStatus.Disconnected:
            return CommandStatus.NotConnected

        if self._engineering_mode:
            return CommandStatus.EngineeringModeActive

        with TryLock(self._azimuth_command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            with self._azimuth_port_lock:
                self._azimuth_port.write(b'GO H\r')
                self._azimuth_port.read_until(serial.CR)

            self._azimuth_status = AzimuthStatus.Homing
            if blocking and not self.__wait_for_azimuth():
                return CommandStatus.Failed

            log.info(self._config.log_name, 'Homing complete')
            return CommandStatus.Succeeded

    @Pyro4.expose
    def park(self, blocking=True):
        """Slew the dome to the park position"""
        return self.slew_azimuth(self._config.park_azimuth, blocking=blocking)

    @Pyro4.expose
    def slew_azimuth(self, azimuth, blocking=True):
        """Slew the dome to the requested azimuth"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        if self._azimuth_status == AzimuthStatus.Disconnected:
            return CommandStatus.NotConnected

        if self._azimuth_status == AzimuthStatus.NotHomed:
            return CommandStatus.NotHomed

        if self._engineering_mode:
            return CommandStatus.EngineeringModeActive

        with TryLock(self._azimuth_command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            with self._azimuth_port_lock:
                self._azimuth_port.write(f'GO {float(azimuth):05.1f}\r'.encode('ascii'))
                self._azimuth_port.read_until(serial.CR)

            self._azimuth_status = AzimuthStatus.Moving

            if blocking and not self.__wait_for_azimuth():
                return CommandStatus.Failed

            return CommandStatus.Succeeded


    @Pyro4.expose
    def status(self):
        """Query the latest status."""
        with self._shutter_status_lock:
            data = {
                'date': Time.now().strftime('%Y-%m-%dT%H:%M:%SZ'),
                'shutter': self._shutter_status,
                'shutter_label': ShutterStatus.label(self._shutter_status),
                'engineering_mode': self._engineering_mode,
                'closed': self._shutter_status == ShutterStatus.Closed,
                'heartbeat_status': self._heartbeat_status,
                'heartbeat_status_label': HeartbeatStatus.label(self._heartbeat_status),
                'heartbeat_remaining': self._heartbeat_seconds_remaining
            }

        with self._azimuth_status_lock:
            data.update({
                'azimuth': self._azimuth % 360,
                'azimuth_status': self._azimuth_status,
                'azimuth_status_label': AzimuthStatus.label(self._azimuth_status),
            })


        return data

    @Pyro4.expose
    def ping(self):
        """Returns immediately with a success status"""
        return CommandStatus.Succeeded


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Dome daemon')
    parser.add_argument('config', help='Path to configuration json file')
    args = parser.parse_args()
    c = Config(args.config)
    c.daemon.launch(DomeDaemon(c))
